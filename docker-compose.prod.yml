services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "3333:3333"
    environment:
      - NODE_ENV=production
      - PORT=3333
      - HOST=0.0.0.0
      - LOG_LEVEL=info
      - APP_KEY=${APP_KEY}  # Must be set in .env file
      - SESSION_DRIVER=cookie
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE:-aides_simplifiees}
      - APP_NAME=${APP_NAME:-Aides simplifiÃ©es}
      - PUBLIC_APP_URL=${PUBLIC_APP_URL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ADMIN_LOGIN=${ADMIN_LOGIN}
      - MATOMO_URL=${MATOMO_URL}
      - MATOMO_TOKEN=${MATOMO_TOKEN}
      - MATOMO_SITE_ID=${MATOMO_SITE_ID}
      - OPENFISCA_URL=${OPENFISCA_URL:-https://openfisca.aides.beta.numerique.gouv.fr/calculate}
      - LEXIMPACT_URL=${LEXIMPACT_URL:-https://leximpact.aides.beta.numerique.gouv.fr}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - app_logs:/app/logs
    deploy:
      replicas: 2  # Scale for production
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3333/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE:-aides_simplifiees}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/backups:/backups  # For database backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - app_logs:/var/log/app:ro
    depends_on:
      - app
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Database backup service
  postgres-backup:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE:-aides_simplifiees}
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - ./database/backups:/backups
    command: >
      sh -c "
      while true; do
        pg_dump -h postgres -U $$POSTGRES_USER -d $$POSTGRES_DB > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
        find /backups -name '*.sql' -mtime +7 -delete
        sleep 86400
      done"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  app_logs:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
