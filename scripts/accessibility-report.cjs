#!/usr/bin/env node

/**
 * Script de g√©n√©ration de rapport d'accessibilit√© pour les PRs GitHub
 * Analyse les rapports JSON g√©n√©r√©s par Axe et cr√©e un commentaire format√©
 */

const fs = require('node:fs')
const path = require('node:path')
const process = require('node:process')

/**
 * G√©n√®re un r√©sum√© des violations d'accessibilit√©
 * @param {string} reportsDir - R√©pertoire contenant les rapports JSON
 * @returns {object} Objet contenant le r√©sum√© et les statistiques
 */
function generateAccessibilityReport(reportsDir = 'reports/accessibility') {
  if (!fs.existsSync(reportsDir)) {
    console.log('Aucun rapport d\'accessibilit√© g√©n√©r√©')
    return null
  }

  const reportFiles = fs.readdirSync(reportsDir).filter(f => f.endsWith('.json'))

  if (reportFiles.length === 0) {
    console.log('Aucun fichier de rapport trouv√© dans', reportsDir)
    return null
  }

  let totalViolations = 0
  let criticalViolations = 0
  let seriousViolations = 0
  let reportSummary = '## ü¶Æ Rapport d\'accessibilit√©\n\n'

  const testResults = []

  for (const file of reportFiles) {
    try {
      const filePath = path.join(reportsDir, file)
      const report = JSON.parse(fs.readFileSync(filePath, 'utf8'))
      const violations = report.violations || []

      const critical = violations.filter(v => v.impact === 'critical').length
      const serious = violations.filter(v => v.impact === 'serious').length
      const moderate = violations.filter(v => v.impact === 'moderate').length
      const minor = violations.filter(v => v.impact === 'minor').length

      totalViolations += violations.length
      criticalViolations += critical
      seriousViolations += serious

      const testName = file.replace('.json', '').replace(/_/g, ' ')

      testResults.push({
        name: testName,
        file,
        violations: violations.length,
        critical,
        serious,
        moderate,
        minor,
        details: violations,
      })

      // Ajout au r√©sum√©
      reportSummary += `### üìÑ ${testName}\n`
      if (critical > 0)
        reportSummary += `- üö® **Critiques**: ${critical}\n`
      if (serious > 0)
        reportSummary += `- ‚ö†Ô∏è  **Importantes**: ${serious}\n`
      if (moderate > 0)
        reportSummary += `- üî∂ **Mod√©r√©es**: ${moderate}\n`
      if (minor > 0)
        reportSummary += `- üîπ **Mineures**: ${minor}\n`
      reportSummary += `- üìä **Total**: ${violations.length}\n\n`

      // D√©tail des violations critiques
      if (critical > 0) {
        reportSummary += '**üö® Violations critiques √† corriger :**\n'
        violations
          .filter(v => v.impact === 'critical')
          .forEach((v) => {
            reportSummary += `- **${v.id}**: ${v.description}\n`
            reportSummary += `  - [üìñ Documentation](${v.helpUrl})\n`
          })
        reportSummary += '\n'
      }

      // D√©tail des violations importantes
      if (serious > 0 && critical === 0) { // N'afficher que si pas de critiques
        reportSummary += '**‚ö†Ô∏è Violations importantes √† examiner :**\n'
        violations
          .filter(v => v.impact === 'serious')
          .slice(0, 3) // Limiter √† 3 pour √©viter un commentaire trop long
          .forEach((v) => {
            reportSummary += `- **${v.id}**: ${v.description}\n`
          })
        if (serious > 3) {
          reportSummary += `- *... et ${serious - 3} autres violations importantes*\n`
        }
        reportSummary += '\n'
      }

      // D√©tail des violations mod√©r√©es et mineures
      if (moderate > 0 || minor > 0) {
        reportSummary += '**üî∂ Violations mod√©r√©es et mineures :**\n'
        if (moderate > 0) {
          reportSummary += `- üî∂ **Mod√©r√©es**: ${moderate}\n`
          violations
            .filter(v => v.impact === 'moderate')
            .forEach((v) => {
              reportSummary += `  - **${v.id}**: ${v.description}\n`
            })
        }
        if (minor > 0) {
          reportSummary += `- üîπ **Mineures**: ${minor}\n`
          violations
            .filter(v => v.impact === 'minor')
            .forEach((v) => {
              reportSummary += `  - **${v.id}**: ${v.description}\n`
            })
        }
        reportSummary += '\n'
      }
    }
    catch (e) {
      console.error(`Erreur lors de la lecture de ${file}:`, e)
      reportSummary += `### ‚ùå Erreur de lecture : ${file}\n`
      reportSummary += `Impossible de parser le fichier de rapport.\n\n`
    }
  }

  // R√©sum√© global
  reportSummary += '---\n\n'

  if (criticalViolations > 0) {
    reportSummary += `## ‚ùå ${criticalViolations} violation${criticalViolations > 1 ? 's' : ''} critique${criticalViolations > 1 ? 's' : ''} d√©tect√©e${criticalViolations > 1 ? 's' : ''}\n\n`
    reportSummary += 'üö´ **Les violations critiques doivent √™tre corrig√©es avant le merge.**\n\n'
  }
  else if (seriousViolations > 0) {
    reportSummary += `## ‚ö†Ô∏è ${seriousViolations} violation${seriousViolations > 1 ? 's' : ''} importante${seriousViolations > 1 ? 's' : ''} d√©tect√©e${seriousViolations > 1 ? 's' : ''}\n\n`
    reportSummary += 'üìã Violations importantes √† examiner, mais pas bloquantes pour le merge.\n\n'
  }
  else {
    reportSummary += '## ‚úÖ Aucune violation critique ou importante d√©tect√©e\n\n'
    reportSummary += 'üéâ Excellent travail ! L\'accessibilit√© est respect√©e sur les parcours test√©s.\n\n'
  }

  reportSummary += `üìà **R√©sum√© global**: ${totalViolations} violation${totalViolations > 1 ? 's' : ''} sur ${reportFiles.length} test${reportFiles.length > 1 ? 's' : ''}\n\n`

  // Liens utiles
  reportSummary += '### üìö Ressources\n'
  reportSummary += '- üìñ [RGAA 4.1 - Guide d\'accessibilit√©](https://accessibilite.numerique.gouv.fr/)\n'
  reportSummary += '- üîß [Axe DevTools](https://www.deque.com/axe/devtools/) pour tester manuellement\n'
  reportSummary += '- üéØ [WebAIM Contrast Checker](https://webaim.org/resources/contrastchecker/) pour les contrastes\n'

  return {
    summary: reportSummary,
    stats: {
      total: totalViolations,
      critical: criticalViolations,
      serious: seriousViolations,
      testsCount: reportFiles.length,
    },
    results: testResults,
  }
}

/**
 * Fonction principale - peut √™tre utilis√©e en ligne de commande ou import√©e
 */
function main() {
  const reportsDir = process.argv[2] || 'reports/accessibility'
  const outputFormat = process.argv[3] || 'markdown'

  const result = generateAccessibilityReport(reportsDir)

  if (!result) {
    process.exit(0)
  }

  if (outputFormat === 'json') {
    console.log(JSON.stringify(result, null, 2))
  }
  else {
    console.log(result.summary)
  }

  // Code de sortie selon les violations critiques
  if (result.stats.critical > 0) {
    process.exit(1)
  }
}

// Ex√©cution si appel√© directement
if (require.main === module) {
  main()
}

module.exports = { generateAccessibilityReport }
